# -*- coding: utf-8 -*-
"""ML Model- decision_tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11GOs4al8XP6tDzsp368AwCa-u6KhEBVD
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/corona.csv")

df.info()

data=[df]
genders={'male':0,'female':1,'None':2}
result={'positive':0,"negative":1,"other":2}
age={'Yes':0,'No':1,'None':2}
for dataset in data:
  dataset['gender']=dataset['gender'].map(genders)
  dataset['corona_result']=dataset['corona_result'].map(result)
  dataset['age_60_and_above']=dataset['age_60_and_above'].map(age)

df=df.drop(['test_date', 'test_indication'], axis=1)

data=[df]
for dataset in data:
  dataset['fever']=dataset['fever'].replace("None",2)
  dataset['cough']=dataset['cough'].replace("None",2)
  dataset['shortness_of_breath']=dataset['shortness_of_breath'].replace("None",2)
  dataset['sore_throat']=dataset['sore_throat'].replace("None",2)
  dataset['head_ache']=dataset['head_ache'].replace("None",2)
  dataset['age_60_and_above']=dataset['age_60_and_above'].replace("None",2)
 
df['fever']=df["fever"].astype(int)
df['age_60_and_above']=df["age_60_and_above"].astype(int)
df['head_ache']=df["head_ache"].astype(int)
df['sore_throat']=df["sore_throat"].astype(int)
df['shortness_of_breath']=df["shortness_of_breath"].astype(int)
df['cough']=df["cough"].astype(int)

df

"""**DATA SPLITTING**"""

#Split data into 80% training & 20% testing data sets
X = df.iloc[:, [0, 1, 2, 3, 4, 6, 7]]
y = df.iloc[:, [5]]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""**Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

import pandas as pd
import numpy as np

print(clf.feature_importances_)

#plot graph of feature importances for better visualization
feat_importances = pd.Series(clf.feature_importances_,index=X.columns)
feat_importances.nlargest(7).plot(kind='barh')

y_pred = clf.predict(X_test)
y_pred

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Prediction- Headache**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [4]]
y = df.iloc[:, [5]]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Prediction- Fever**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [1]]
y = df.iloc[:, [5]]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Prediction- sore throat**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [2]]
y = df.iloc[:, [5]]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Prediction- Cough**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [0]]
y = df.iloc[:, [5]]
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Covid prediction -Cough and fever**


"""

X=df.iloc[:, [0, 1]]
X

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [0, 1]].values
y = df.iloc[:, [5]].values.ravel()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
y_pred

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))



"""**Covid prediction -Cough and sore_throat**



"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [0, 2]].values
y = df.iloc[:, [5]].values.ravel()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Covid prediction -sore_throat and Shortness of breath**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [2, 3]].values
y = df.iloc[:, [5]].values.ravel()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Covid prediction -cough, sore_throat and Shortness of breath**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [0,2, 3]].values
y = df.iloc[:, [5]].values.ravel()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Covid prediction -fever and headache**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [1,4]].values
y = df.iloc[:, [5]].values.ravel()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))



"""**Covid prediction -fever,cough and Shortness of breath**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [0,1,3]].values
y = df.iloc[:, [5]].values.ravel()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Covid prediction -fever,cough and sore_throat**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [0,1,2]].values
y = df.iloc[:, [5]].values.ravel()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

"""**Covid prediction -fever,cough, sore_throat and Shortness of breath**"""

#Split data into 80% training & 20% testing data sets
X=df.iloc[:, [0,1,2,3]].values
y = df.iloc[:, [5]].values.ravel()
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

# Creating scaled set to be used in model to improve the results
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(random_state=0)

clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

#Evaluation metrics after prediction of data
from sklearn.metrics import classification_report,confusion_matrix, accuracy_score
print(classification_report(y_test ,y_pred ))
print('Confusion Matrix: \n', confusion_matrix(y_test,y_pred))
print()
print('Accuracy: ', accuracy_score(y_test,y_pred))

